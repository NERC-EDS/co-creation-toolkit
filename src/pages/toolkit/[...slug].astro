---
import { type CollectionEntry, getCollection } from "astro:content";

import BaseLayout from "../../layouts/BaseLayout.astro";

import Hero from "../../components/Hero.astro";
import Icon from "../../components/Icon.astro";
import Pill from "../../components/Pill.astro";

interface Props {
  entry: CollectionEntry<"toolkit">;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
  const caseStudies = await getCollection("toolkit");
  return caseStudies.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
  <div class="stack gap-20">
    <div class="stack gap-15">
      <header>
        <div class="wrapper stack gap-2">
          <a class="back-link" href="/co-creation-toolkit/toolkit/"
            ><Icon icon="arrow-left" /> Toolkit</a
          >
          <Hero title={entry.data.title} align="start">
            <div class="details">
              <div class="tags">
                {entry.data.tags.map((t: string) => <Pill>{t}</Pill>)}
              </div>
              <p class="description">{entry.data.description}</p>
            </div>
          </Hero>
        </div>
      </header>
      <main class="wrapper">
        <div class="stack gap-10 content">
          {
            entry.data.img && (
              <img src={entry.data.img} alt={entry.data.img_alt || ""} />
            )
          }
          <div class="content">
            <Content />
          </div>
        </div>
      </main>
    </div>
    <!-- <ContactCTA /> -->
  </div>
</BaseLayout>

<style>
  header {
    padding-bottom: 2.5rem;
    border-bottom: 1px solid var(--gray-800);
  }

  .content :global(ul) {
    list-style-type: square; /* Custom bullet style */
    padding: 0; /* Remove default padding */
    margin: 0 0 0 20px; /* Add left margin to indent the list */
  }

  .content :global(ul li) {
    position: relative;
    padding-left: 8px; /* Space for the custom bullet */
    margin-bottom: 8px; /* Space between list items */
    font-size: 16px; /* Adjust font size if needed */
  }

  .content :global(ul li::marker) {
    color: var(--bgs-2);
  }

  .content :global(ol) {
    list-style-type: decimal; /* Custom bullet style */
    padding: 0; /* Remove default padding */
    margin: 0 0 0 20px; /* Add left margin to indent the list */
  }

  .content :global(ol li) {
    position: relative;
    padding-left: 8px; /* Space for the custom bullet */
    margin-bottom: 8px; /* Space between list items */
    font-size: 16px; /* Adjust font size if needed */
  }

  .content :global(ol li::marker) {
    color: var(--bgs-2); /* Custom color for the list numbers */
  }

  .content :global(blockquote) {
    border-left: 4px solid var(--bgs-2); /* Left border color */
    margin: 1.5em 0; /* Top/bottom margin */
    padding: 1em 1.5em; /* Padding inside the blockquote */
    color: var(--text-color); /* Text color */
    background-color: var(--bg-light); /* Background color */
    font-style: italic; /* Italicize the text */
    position: relative; /* Ensure proper stacking context */
    quotes: "“" "”" "‘" "’"; /* Custom quote marks */
    font-size: var(--text-lg);
    margin-top: 64px;
    margin-bottom: 64px;
  }

  .content :global(blockquote p) {
    margin: 0; /* Remove default margin from p tags inside blockquote */
  }

  .content :global(blockquote::before) {
    content: open-quote; /* Opening quote */
    font-size: 2em; /* Make it larger */
    color: var(--bgs-2); /* Color for the quote mark */
    line-height: 0.1em; /* Adjust line height */
    margin-right: 0.25em; /* Space after the quote mark */
    vertical-align: -0.4em; /* Align quote mark vertically */
  }

  .content :global(blockquote::after) {
    content: close-quote; /* Closing quote */
    font-size: 2em; /* Make it larger */
    color: var(--bgs-2); /* Color for the quote mark */
    line-height: 0.1em; /* Adjust line height */
    margin-left: 0.25em; /* Space before the quote mark */
    vertical-align: -0.4em; /* Align quote mark vertically */
  }

  /* Styling for links */
  .content :global(a) {
    display: inline-block;
    color: var(--link-color);
    text-decoration: none;
    transition: background-color 0.3s ease;
    color: var(--bgs-2);
    
    text-decoration: underline !important; /* Add underline on hover */
  }

  .content :global(a:hover) {
    color: var(--bgs-1);
  }

  .back-link {
    display: none;
    color: var(--accent-dark);
  }

  .details {
    display: flex;
    flex-direction: column;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    gap: 1.5rem;
    justify-content: space-between;
    align-items: center;
  }

  .tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  .description {
    font-size: var(--text-lg);
    max-width: 54ch;
  }

  .content {
    max-width: 65ch;
    margin-inline: auto;
  }

  .content > :global(* + *) {
    margin-top: 1rem;
  }

  .content :global(h1),
  .content :global(h2),
  .content :global(h3),
  .content :global(h4),
  .content :global(h5) {
    margin: 1.5rem 0;
  }

  .content :global(img) {
    border-radius: 0.5rem;
    box-shadow: var(--shadow-sm);
    background: var(--gradient-subtle);
    border: 1px solid var(--gray-800);
    margin-bottom: 8px;
  }

  .back-link,
  .content :global(a) {
    text-decoration: 1px solid underline transparent;
    text-underline-offset: 0.25em;
    transition: text-decoration-color var(--theme-transition);
  }

  .back-link:hover,
  .back-link:focus,
  .content :global(a:hover),
  .content :global(a:focus) {
    text-decoration-color: currentColor;
  }

  @media (min-width: 50em) {
    .back-link {
      display: flex;
      gap: 12px;
      align-items: center;
    }

    .details {
      flex-direction: row;
      gap: 2.5rem;
    }

    .tags {
      justify-content: left;
    }
  }
</style>
